package com.testapi.charater.data;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;


@Configuration
@ComponentScan
public class TestLoskArkAPI {
	
	static String LostArkApiKey = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IktYMk40TkRDSTJ5NTA5NWpjTWk5TllqY2lyZyIsImtpZCI6IktYMk40TkRDSTJ5NTA5NWpjTWk5TllqY2lyZyJ9.eyJpc3MiOiJodHRwczovL2x1ZHkuZ2FtZS5vbnN0b3ZlLmNvbSIsImF1ZCI6Imh0dHBzOi8vbHVkeS5nYW1lLm9uc3RvdmUuY29tL3Jlc291cmNlcyIsImNsaWVudF9pZCI6IjEwMDAwMDAwMDAzNjQ0MTEifQ.fC1a_lnE2bFeH2A5E-uMrFSMixzSQaaYaZZ9K0sIanTeVe5KT9LEKm4bYL6uQEQcgTkNGSOqf7EL1mMECQ-nI1C_kLotNouITiaTfyELNIPm0asonmX1dFc2CCfHQIl6ZRqPjPd02hgmeAGmh40e4UPtBZoXep_OPYy36vVw56fynBpentoOJOTavnleG-ZVtPKNk9EKCKxEUl5FFRIvfrJMSFWp_UXKCKvq4vfa7axfyYWzsibCXwJu-Mu6CTw7MP1rnXjv660GtSW4E0rbAX8Rqmbd6yIuSH738uRXfZJDYOPg_chBRyOEK-9ja5mYgLIx_lLp0Rq7lxFpDL7jFg";
	
	private static void getCharacterInfo() throws IOException{
		// https://developer-lostark.game.onstove.com/characters/행복한몰리/siblings
        // 3. URL 객체 생성.
        URL url = new URL("https://developer-lostark.game.onstove.com/characters/%ED%96%89%EB%B3%B5%ED%95%9C%EB%AA%B0%EB%A6%AC/siblings");
        // 4. 요청하고자 하는 URL과 통신하기 위한 Connection 객체 생성.
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        
        // 5. 통신을 위한 메소드 SET.
        conn.setRequestMethod("GET");
        // 5.1 통신을 위한 authorization
        conn.setRequestProperty("authorization", "Bearer "+ LostArkApiKey);
        // 6. 통신을 위한 Content-type SET. 
        conn.setRequestProperty("content-type", "application/json");
        // 7. 통신 응답 코드 확인.
        System.out.println("Response code: " + conn.getResponseCode());
        
        // 8. 전달받은 데이터를 BufferedReader 객체로 저장.
        BufferedReader rd;
        if(conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } else {
            rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
        }
        
        // 9. 저장된 데이터를 라인별로 읽어 StringBuilder 객체로 저장.
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = rd.readLine()) != null) {
            sb.append(line);
        }
        // 10. 객체 해제.
        rd.close();
        conn.disconnect();
        // 11. 전달받은 데이터 확인.
        System.out.println("캐릭터 정보 개시");
        System.out.println(sb.toString());
	}
	
	private static void getAccesory() throws Exception{
		// https://developer-lostark.game.onstove.com/characters/행복한몰리/siblings
        // 3. URL 객체 생성.
        URL url = new URL("https://developer-lostark.game.onstove.com/auctions/items");
        // 4. 요청하고자 하는 URL과 통신하기 위한 Connection 객체 생성.
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        
        // 5. 통신을 위한 메소드 SET.
        conn.setRequestMethod("POST");
        // 5.1 통신을 위한 authorization
        conn.setRequestProperty("authorization", "Bearer "+ LostArkApiKey);
        // 6. 통신을 위한 Content-type SET. 
        conn.setRequestProperty("content-type", "application/json");
        conn.setRequestProperty("accept", "application/json");
        
       
        
        
        // 7. 통신 응답 코드 확인.
        System.out.println("Response code: " + conn.getResponseCode());
        
        // 8. 전달받은 데이터를 BufferedReader 객체로 저장.
        BufferedReader rd;
        if(conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
            rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
        } else {
            rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
        }
        
        // 9. 저장된 데이터를 라인별로 읽어 StringBuilder 객체로 저장.
        StringBuilder sb = new StringBuilder();
        String line;
        while ((line = rd.readLine()) != null) {
            sb.append(line);
        }
        // 10. 객체 해제.
        rd.close();
        conn.disconnect();
        // 11. 전달받은 데이터 확인.
        System.out.println("캐릭터 정보 개시");
        System.out.println(sb.toString());
	}
	
	public static void main(String[] args) throws IOException {
		// use spring
		try(var context = 
				new AnnotationConfigApplicationContext(TestLoskArkAPI.class)) {
			
			System.out.println("Initialization of context is completed");


			Path currentRelativePath = Paths.get("");
			String s = currentRelativePath.toAbsolutePath().getParent().toString();
			s += "\\test.json";
			System.out.println(s);
			try {
				String json = readFileAsString(s);
				System.out.println(json);
			} catch (Exception e) {
				e.printStackTrace();	
			}
			
			//getCharacterInfo();
			
	        
		}
	}
	
	public static String readFileAsString(String file) throws Exception{
		return new String(Files.readAllBytes(Paths.get(file)));
	}
	

}


